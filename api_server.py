import asyncio
from datetime import datetime, timedelta
from typing import Annotated

import config
import utils
from config import NOTIFY_URL, bug_id
from keyboards import user as user_kb
from fastapi import FastAPI, Request, HTTPException, Form  # –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FastAPI
from pydantic import BaseModel  # –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
from create_bot import bot  # –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞
from io import BytesIO  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏ –±–∞–π—Ç–æ–≤
from utils import db  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import requests  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import uvicorn  # –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ FastAPI


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()


# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π Lava
class LavaWebhook(BaseModel):

    order_id: str  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
    status: str  # –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    amount: float  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞


# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç —Å–∏—Å—Ç–µ–º—ã PayOK
class PayOKWebhook(BaseModel):

    payment_id: str  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
    amount: float  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π MidJourney
async def send_mj_photo(user_id, photo_url, kb):

    try:
        response = requests.get(photo_url, timeout=5)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
    except requests.exceptions.Timeout:
        img = photo_url  # –í —Å–ª—É—á–∞–µ —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É
    except requests.exceptions.ConnectionError:
        img = photo_url  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
    else:
        img = BytesIO(response.content)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    await bot.send_photo(user_id, photo=img, reply_markup=kb)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_balance(user_id, amount):

    print(user_id)
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print("USER", user)
    if user is None:
        return
    stock = 0  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ —Å—É—Ç–æ–∫ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞
    if not user["is_pay"] and int(datetime.now().timestamp()) - user["new_stock_time"] < 86400:
        stock = int(amount * 0.3)  # –î–æ–±–∞–≤–ª—è–µ–º 30% –±–æ–Ω—É—Å
        await db.update_new_stock_time(user_id, 0)
    elif int(datetime.now().timestamp()) - user["stock_time"] < 86400:
        stock = int(amount * 0.1)  # –î–æ–±–∞–≤–ª—è–µ–º 10% –±–æ–Ω—É—Å
        await db.update_stock_time(user_id, 0)
    requests.delete(NOTIFY_URL + f"/stock/{user_id}")  # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–æ–Ω—É—Å–µ
    await db.update_is_pay(user_id, True)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    await db.add_balance(user_id, amount + stock)  # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await db.add_order(user_id, amount, stock)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏
    print("???") # ???
    await bot.send_message(user_id, f"üí∞ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ({amount + stock} —Ä—É–±.)")  # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async def process_pay(order_id, amount):

    if order_id.startswith("s"):  # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞
        await utils.pay.process_purchase(bot, int(order_id)) # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        # await utils.pay.process_sub(bot, int(order_id[1:]))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    else:
        user_id = int(order_id.split("_")[0])  # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        await add_balance(user_id, amount)  # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç FreeKassa
@app.get('/api/pay/freekassa')
async def check_pay_freekassa(MERCHANT_ORDER_ID, AMOUNT):

    await process_pay(MERCHANT_ORDER_ID, int(AMOUNT))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    return 'YES'


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç Lava
@app.post('/api/pay/lava')
async def check_pay_freekassa(data: LavaWebhook):

    if data.status != "success":
        raise HTTPException(200)  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å–ø–µ—à–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º HTTP 200
    await process_pay(data.order_id, int(data.amount))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    raise HTTPException(200)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç Tinkoff
@app.post('/api/pay/tinkoff')
async def check_pay_tinkoff(request: Request):

    data = await request.json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    if data["Status"] != "CONFIRMED":  # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return "OK"

    await process_pay(data["OrderId"], int(data["Amount"] / 100))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    return "OK"


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç PayOK
@app.post('/api/pay/payok')
async def check_pay_freekassa(payment_id: Annotated[str, Form()], amount: Annotated[str, Form()]):

    await process_pay(payment_id, int(amount))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    raise HTTPException(200)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç MidJourney
@app.post('/api/midjourney/{action_id}')
async def get_midjourney(action_id: int, request: Request):
    
    action = await db.get_action(action_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–π—Å—Ç–≤–∏–∏
    data = await request.json()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    user_id = action["user_id"]  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    image_url = data["task_result"]["image_url"]  # URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    image_path = f'photos/{action_id}.png'  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    res = requests.get(image_url)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with open(image_path, "wb") as f:
        f.write(res.content)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if action["image_type"] in ("imagine", "vary", "zoom"):
        await bot.send_photo(user_id, open(image_path, "rb"),
                             reply_markup=user_kb.get_try_prompt_or_choose(data["task_id"],
                                                                           include_try=True))
        if user["free_image"] > 0:
            await db.remove_free_image(user["user_id"])  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        else:
            await db.remove_image(user["user_id"])  # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    elif action["image_type"] == "upscale":
        await bot.send_photo(user_id, open(image_path, "rb"),
                             reply_markup=user_kb.get_choose(data["task_id"]))
    return 200
