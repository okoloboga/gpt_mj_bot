import hashlib  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–µ–π
import hmac     # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
import json     # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
import logging
import random   # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
from datetime import datetime, timedelta  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
from urllib.parse import urlencode  # –î–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤

import requests  # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤

import config  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import FreeKassa, LAVA_API_KEY, LAVA_SHOP_ID, PayOK, Tinkoff  # –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
from utils import db  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö


logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Tinkoff
def get_pay_url_tinkoff(order_id, amount):

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Tinkoff
    data = {
        "TerminalKey": Tinkoff.terminal_id,
        "Amount": amount * 100,  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        "OrderId": order_id,  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        "NotificationURL": "http://91.192.102.250/api/pay/tinkoff"  # URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–ª–∞—Ç—ã
    }
    # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    sing_str = f"{amount * 100}http://91.192.102.250/api/pay/tinkoff{order_id}{Tinkoff.api_token}{Tinkoff.terminal_id}"
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (SHA256)
    sign = hashlib.sha256(sing_str.encode('utf-8')).hexdigest()

    data["Token"] = sign  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–ø–ª–∞—Ç—ã
    res = requests.post("https://securepay.tinkoff.ru/v2/Init", json=data)
    logger.info(f'Tinkoff Response: {res.json()}')
    res_data = res.json()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    return res_data["PaymentURL"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayOK
def get_pay_url_payok(order_id, amount):

    desc = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ NeuronAgent"  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    currency = "RUB"  # –í–∞–ª—é—Ç–∞
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    sign_string = '|'.join(
        str(item) for item in
        [amount, order_id, PayOK.shop_id, currency, desc, PayOK.secret]
    )
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (MD5)
    sign = hashlib.md5(sign_string.encode())

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    params = {"amount": amount, "payment": order_id, "shop": PayOK.shop_id, "desc": desc, "currency": currency,
              "sign": sign.hexdigest()}

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayOK
    return "https://payok.io/pay?" + urlencode(params)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ FreeKassa
def get_pay_url_freekassa(order_id, amount):

    md5 = hashlib.md5()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MD5 —Ö–µ—à–∞
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    md5.update(
        f'{FreeKassa.shop_id}:{amount}:{FreeKassa.secret1}:RUB:{order_id}'.encode('utf-8'))
    pwd = md5.hexdigest()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ FreeKassa
    pay_url = f"https://pay.freekassa.com/?m={FreeKassa.shop_id}&oa={amount}&currency=RUB&o={order_id}&s={pwd}"
    return pay_url


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤–∞—Ä—è
def sortDict(data: dict):

    sorted_tuple = sorted(data.items(), key=lambda x: x[0])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–∞–º
    return dict(sorted_tuple)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Lava
def get_pay_url_lava(user_id, amount):

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    payload = {
        "sum": amount,
        "orderId": str(user_id) + ":" + str(random.randint(10000, 1000000)),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        "shopId": LAVA_SHOP_ID
    }

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    payload = sortDict(payload)
    jsonStr = json.dumps(payload).encode()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (HMAC-SHA256)
    sign = hmac.new(bytes(LAVA_API_KEY, 'UTF-8'), jsonStr, hashlib.sha256).hexdigest()
    headers = {"Signature": sign, "Accept": "application/json", "Content-Type": "application/json"}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞
    res = requests.post("https://api.lava.ru/business/invoice/create", json=payload, headers=headers)
    return res.json()["data"]["url"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤
async def process_purchase(bot, order_id):
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = await db.get_order(order_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if order["pay_time"]:
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã
    await db.set_order_pay(order_id)

    user_id = order["user_id"]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    model = (order["order_type"]).replace('-', '_')

    logger.info(f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–∏–ø –∑–∞–∫–∞–∑–∞: {model}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}")

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ 4o-mini
    bonus = 20000 if int(order["quantity"]) == 100000 else int(order["quantity"]) / 4 
    total_bonus = user["tokens_4o_mini"] + bonus

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
    if model in {'4o', 'o1_preview', 'o1_mini'}:
        new_tokens = int(user[f"tokens_{model}"]) + int(order["quantity"])
        await db.update_tokens(user_id, new_tokens, model)
        await db.update_tokens(user_id, total_bonus, "4o_mini")
        await bot.send_message(user_id, f"‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ {int(order['quantity'] / 1000)} —Ç—ã—Å. —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT-{model}.\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í –∫–∞—á–µ—Å—Ç–≤–µ –±–æ–Ω—É—Å–∞ üéÅ –¥–∞—Ä–∏–º –í–∞–º {int(bonus / 1000)} —Ç—ã—Å. —Ç–æ–∫–µ–Ω–æ–≤ GPT-4o-mini")
    elif order["order_type"] == "midjourney":
        new_requests = user["mj"] + order["quantity"]
        await db.update_requests(user_id, new_requests)
        await bot.send_message(user_id, f"‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ {order['quantity']} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è MidJourney.")
