import logging
from datetime import datetime, timedelta
from typing import List

import requests
from aiogram import Bot
from aiogram.types import Message, CallbackQuery, ChatActions, ContentType
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

import config
from utils import db, ai, more_api, pay  # –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î –∏ –≤–Ω–µ—à–Ω–∏–º–∏ API
from states import user as states  # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import keyboards.user as user_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
from config import bot_url, TOKEN, NOTIFY_URL, bug_id, PHOTO_PATH, MJ_PHOTO_BASE_URL
from create_bot import dp  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –∏–∑ create_bot.py
from utils.ai import mj_api

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')

vary_types = {"subtle": "Subtle", "strong": "Strong"}  # –¢–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º

'''
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async def check_promocode(user_id, code, bot: Bot):

    promocode = await db.get_promocode_by_code(code)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ –∫–æ–¥—É
    if promocode is None:
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
    user_promocode = await db.get_user_promocode_by_promocode_id_and_user_id(promocode["promocode_id"], user_id)
    all_user_promocode = await db.get_all_user_promocode_by_promocode_id(promocode["promocode_id"])
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
    if user_promocode is None and len(all_user_promocode) < promocode["uses_count"]:
        await db.create_user_promocode(promocode["promocode_id"], user_id)
        await db.add_balance(user_id, promocode['amount'], is_promo=True)  # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await bot.send_message(user_id, f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {promocode['amount']} —Ä—É–±–ª–µ–π.</b>")
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if user_promocode is not None:
            await bot.send_message(user_id, "<b>–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –í–∞–º–∏ —Ä–∞–Ω–µ–µ.</b>")
        elif len(all_user_promocode) >= promocode["uses_count"]:
            await bot.send_message(user_id, "<b>–°—Å—ã–ª–∫–∞ –∏—Å—á–µ—Ä–ø–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.</b>")
'''

# –°–Ω–∏–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_balance(bot: Bot, user_id):

    await db.remove_balance(user_id)
    user = await db.get_user(user_id)
    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 50, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if user["balance"] <= 50:
        await db.update_stock_time(user_id, int(datetime.now().timestamp()))
        await bot.send_message(user_id, """‚ö†Ô∏è–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å!
–£—Å–ø–µ–π –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –∏ –ø–æ–ª—É—á–∏ –Ω–∞ —Å—á—ë—Ç +10% –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚§µÔ∏è""", 
                               reply_markup=user_kb.get_pay(user_id, 10))  # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

'''
# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
sub_types_texts = {
    "standard": """–¢–∞—Ä–∏—Ñ <b>¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª</b>
2 –º–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Midjourney –≤ –¥–µ–Ω—å""",
    "premium": """–¢–∞—Ä–∏—Ñ <b>¬´–ü—Ä–µ–º–∏—É–º¬ª</b>
5 –º–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
40 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Midjourney –≤ –¥–µ–Ω—å""",
    "illustrator": """–¢–∞—Ä–∏—Ñ <b>¬´–ò–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä¬ª</b>
50 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Midjourney –≤ –¥–µ–Ω—å""",
    "author": """–¢–∞—Ä–∏—Ñ <b>¬´–ê–≤—Ç–æ—Ä¬ª</b>
10 –º–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Midjourney –≤ –¥–µ–Ω—å"""
}


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
async def not_enough_balance(bot: Bot, user_id, ai_type="chatgpt"):

    text = """–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ —Å –±–æÃÅ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤‚§µÔ∏è\n\n"""
    user = await db.get_user(user_id)
    if user["sub_time"] and user["sub_time"] < datetime.now():
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
        if ai_type == "chatgpt":
            text = """–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω
–ë–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ChatGPT –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ‚§µÔ∏è"""
        else:
            text = """–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω
–ë–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Midjourney –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ‚§µÔ∏è"""
        kb = user_kb.top_up_balance  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    else:
        showed_sub_types = ()
        if user["sub_type"] == "base":
            showed_sub_types = ("standard", "premium", "illustrator", "author")
        elif user["sub_type"] == "standard":
            showed_sub_types = ("premium", "illustrator", "author")
        elif user["sub_type"] == "premium":
            showed_sub_types = ("illustrator", "author")
        for sub_type in showed_sub_types:
            text += f"{sub_types_texts[sub_type]}\n\n"
        kb = user_kb.top_up_balance  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        if user["sub_type"] in ("illustrator", "author"):
            kb = None  # –î–ª—è —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤ –∫–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω–∞
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω"
    await bot.send_message(user_id, text, reply_markup=kb)
'''


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
async def not_enough_balance(bot: Bot, user_id: int, ai_type: str):

    now = datetime.now()

    if ai_type == "chatgpt":
        user_data = await db.get_user_notified_gpt(user_id)

        if user_data and user_data['last_notification']:
            last_notification = user_data['last_notification']

            # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å–∫–∏–¥–∫–æ–π
            if now < last_notification + timedelta(hours=24):
                await bot.send_message("""
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è üí¨ChatGPT –∏—Å—á–µ—Ä–ø–∞–Ω
–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ –∫–Ω–æ–ø–∫–µ‚§µÔ∏è
                """,
                    reply_markup=user_kb.get_—Åhatgpt_discount_tokens_menu()
                )
                return

        await bot.send_message(user_id, """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è üí¨ChatGPT –∏—Å—á–µ—Ä–ø–∞–Ω
–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ –∫–Ω–æ–ø–∫–µ‚§µÔ∏è
        """, reply_markup=user_kb.get_chatgpt_tokens_menu())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤

    elif ai_type == "image":
        user_data = await db.get_user_notified_mj(user_id)

        if user_data and user_data['last_notification']:
            last_notification = user_data['last_notification']

            # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å–∫–∏–¥–∫–æ–π
            if now < last_notification + timedelta(hours=24):
                await bot.send_message("""
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è 
üé®Midjourney –∏—Å—á–µ—Ä–ø–∞–Ω
–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ –∫–Ω–æ–ø–∫–µ‚§µÔ∏è
                """,
                    reply_markup=user_kb.get_midjourney_discount_requests_menu()
                )
                return
        await bot.send_message(user_id, """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è 
üé®Midjourney –∏—Å—á–µ—Ä–ø–∞–Ω
–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ –∫–Ω–æ–ø–∫–µ‚§µÔ∏è
        """, reply_markup=user_kb.get_midjourney_requests_menu())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney
async def get_mj(prompt, user_id, bot: Bot):

    user = await db.get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(bot, user_id, "image")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
        return

    await bot.send_message(user_id, "–û–∂–∏–¥–∞–π—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..üïô", reply_markup=user_kb.get_menu(user["default_ai"]))
    await bot.send_chat_action(user_id, ChatActions.UPLOAD_PHOTO)

    res = await ai.get_mdjrny(prompt, user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API

    logger.info(f"MidJourney: {res}")

    if res is None:
        await bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
        return
    elif res['status'] == "failed":
        await bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:\n\n{res['message']}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ MidJourney
    now = datetime.now()
    user_notified = await db.get_user_notified_mj(user_id)
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    if 1 < user["mj"] <= 3:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        if user_notified is None:
            await db.create_user_notification_mj(user_id)
            await notify_low_midjourney_requests(user_id, bot)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
            # await db.set_user_notified(user_id)  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        else:
            last_notification = user_notified['last_notification']
            if last_notification is None or now > last_notification + timedelta(days=30):
                await db.update_user_notification_mj(user_id)
                await notify_low_midjourney_requests(user_id, bot)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
async def get_gpt(prompt, messages, user_id, bot: Bot):

    user = await db.get_user(user_id)
    lang_text = {"en": "compose an answer in English", "ru": "—Å–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"}
    prompt += f"\n{lang_text[user['chat_gpt_lang']]}"
    messages.append({"role": "user", "content": prompt})

    await bot.send_chat_action(user_id, ChatActions.TYPING)

    res = await ai.get_gpt(messages)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ChatGPT
    await bot.send_message(user_id, res["content"], reply_markup=user_kb.clear_content)
    if not res["status"]:
        return
    messages.append({"role": "assistant", "content": res["content"]})

    # –°–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if user["free_chatgpt"] > 0:
        await db.remove_free_chatgpt(user_id, res["tokens"])  # –£–º–µ–Ω—å—à–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
    else:
        await db.remove_chatgpt(user_id, res["tokens"])  # –£–º–µ–Ω—å—à–∞–µ–º –ø–ª–∞—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤
    now = datetime.now()
    user_notified = await db.get_user_notified_gpt(user_id)
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    if 0 < user["tokens"] <= 30000:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 30 —Ç—ã—Å –∏–ª–∏ –º–µ–Ω—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤
        if user_notified is None:
            await db.create_user_notification_gpt(user_id)
            await notify_low_chatgpt_tokens(user_id, bot)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
            # await db.set_user_notified(user_id)  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        else:
            last_notification = user_notified['last_notification']
            if last_notification is None or now > last_notification + timedelta(days=30):
                await db.update_user_notification_gpt(user_id)
                await notify_low_chatgpt_tokens(user_id, bot)

    await db.add_action(user_id, "chatgpt")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return messages


''' –ù–æ–≤—ã–µ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–∞—Ö '''

# –£–≤–µ–¥–æ–º–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤ GPT
async def notify_low_chatgpt_tokens(user_id, bot: Bot):

    await bot.send_message(user_id, """
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Ç–æ–∫–µ–Ω—ã –¥–ª—è üí¨ChatGPT
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
    """, reply_markup=user_kb.get_chatgpt_discount_nofication())

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ MidJourney
async def notify_low_midjourney_requests(user_id, bot: Bot):

    await bot.send_message(user_id, """
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è üé®Midjourney
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
    """, reply_markup=user_kb.get_midjourney_discount_notification())


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(state="*", commands='start')
async def start_message(message: Message, state: FSMContext):

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã /start (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã)
    msg_args = message.get_args().split("_")
    inviter_id = 0
    code = None
    if msg_args != ['']:
        for msg_arg in msg_args:
            if msg_arg[0] == "r":
                try:
                    inviter_id = int(msg_arg[1:])
                except ValueError:
                    continue
            elif msg_arg[0] == "p":
                code = msg_arg[1:]

    user = await db.get_user(message.from_user.id)

    if user is None:
        await db.add_user(message.from_user.id, message.from_user.username, message.from_user.first_name, int(inviter_id))
        default_ai = "chatgpt"
    else:
        default_ai = user["default_ai"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("""<b>NeuronAgent</b>ü§ñ - <i>2 –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!</i>
<b>ChatGPT –∏–ª–∏ Midjourney?</b>""", reply_markup=user_kb.get_menu(default_ai))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
    if code is not None:
        await check_promocode(message.from_user.id, code, message.bot)



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="check_sub")
async def check_sub(call: CallbackQuery):

    user = await db.get_user(call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    if user is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        await db.add_user(call.from_user.id, call.from_user.username, call.from_user.first_name, 0)
    await call.message.answer("""<b>NeuronAgent</b>ü§ñ - <i>2 –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!</i>

<b>ChatGPT –∏–ª–∏ Midjourney?</b>""", reply_markup=user_kb.get_menu(user["default_ai"]))  # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ AI
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="delete_msg")
async def delete_msg(call: CallbackQuery, state: FSMContext):

    await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="back_to_menu")
async def back_to_menu(call: CallbackQuery):

    user = await db.get_user(call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.answer("""NeuronAgentü§ñ - 2 –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!

ChatGPT –∏–ª–∏ Midjourney?""", reply_markup=user_kb.get_menu(user["default_ai"]))  # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ AI
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
@dp.message_handler(text="ü§ù–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
@dp.message_handler(commands='partner')
async def ref_menu(message: Message):

    ref_data = await db.get_ref_stat(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    if ref_data['all_income'] is None:
        all_income = 0
    else:
        all_income = ref_data['all_income']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR-–∫–æ–¥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
    await message.answer_photo(more_api.get_qr_photo(bot_url + '?start=' + str(message.from_user.id)),
                               caption=f'''<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

<i>–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π 15% —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π, –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ!</i>

<b>‚¨áÔ∏è –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
‚îî {bot_url}?start=r{message.from_user.id}

<b>üèÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: <b>{ref_data["count_refs"]}</b>
‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç: <b>{ref_data["orders_count"]}</b>
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{int(all_income * 0.15)}</b> —Ä—É–±–ª–µ–π
‚îî –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: <b>{ref_data["available_for_withdrawal"]}</b> —Ä—É–±–ª–µ–π

–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ''',
                               reply_markup=user_kb.get_ref_menu(f'{bot_url}?start=r{message.from_user.id}'))

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞)
@dp.message_handler(state="*", text="‚öô–ê–∫–∫–∞—É–Ω—Ç")
@dp.message_handler(state="*", commands="account")
async def show_profile(message: Message, state: FSMContext):

    await state.finish()
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    mj = int(user['mj']) + int(user['free_image']) if int(user['mj']) + int(user['free_image']) >= 0 else 0
    gpt = int(user['tokens']) + int(user['free_chatgpt']) if int(user['tokens']) + int(user['free_chatgpt']) >= 0 else 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
    sub_text = f"""
–î–æ—Å—Ç—É–ø–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è üé®Midjourney:  {format(mj, ',').replace(',', ' ')}
–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è üí¨ChatGPT:  {format(gpt, ',').replace(',', ' ')}
        """
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    await message.answer(f"""üÜî: <code>{message.from_user.id}</code>
{sub_text}""", reply_markup=user_kb.get_account(user["chat_gpt_lang"], "account"))

''' –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞)
@dp.message_handler(state="*", text="‚öô–ê–∫–∫–∞—É–Ω—Ç")
async def show_profile(message: Message, state: FSMContext):
    await state.finish()
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sub_text = "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
    if user["sub_type"] and user["sub_time"] > datetime.now():
        sub_text = "–î–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ - " + config.sub_types[user["sub_type"]]["title"]  # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    await message.answer(f"""üÜî: <code>{message.from_user.id}</code>
{sub_text}""", reply_markup=user_kb.get_account(user["chat_gpt_lang"], "account"))
'''


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(Text(startswith="back_to_profile"))
async def back_to_profile(call: CallbackQuery, state: FSMContext):

    src = call.data.split(":")[1]

    if src == "acc":
        await state.finish()
        user = await db.get_user(call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
        sub_text = f"""
–î–æ—Å—Ç—É–ø–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è üé®Midjourney:  {format(int(user['mj']) + int(user['free_image']), ',').replace(',', ' ')}
–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è üí¨ChatGPT:  {format(int(user['tokens']) + int(user['free_chatgpt']), ',').replace(',', ' ')}
        """
    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        await call.message.edit_text(f"""üÜî: <code>{call.from_user.id}</code>
    {sub_text}""", reply_markup=user_kb.get_account(user["chat_gpt_lang"], "account"))

    else:
        await state.finish()

        if src == "not_gpt":
        
            await call.message.edit_text("""
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Ç–æ–∫–µ–Ω—ã –¥–ª—è üí¨ChatGPT
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
            """, reply_markup=user_kb.get_chatgpt_discount_nofication())

        if src == "not_mj":
            await call.message.edit_text("""
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è üé®Midjourney
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
            """, reply_markup=user_kb.get_midjourney_discount_notification())

    await call.answer()
    

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(Text(startswith="change_lang:"))
async def change_lang(call: CallbackQuery):

    curr_lang = call.data.split(":")[1]  # –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
    from_msg = call.data.split(":")[2]  # –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω callback)
    new_lang = "en" if curr_lang == "ru" else "ru"  # –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
    await db.change_chat_gpt_lang(call.from_user.id, new_lang)  # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ
    lang_text = {"ru": "—Ä—É—Å—Å–∫–∏–π", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"}
    await call.answer(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang_text[new_lang]}")
    if from_msg == "chatgpt_menu":
        kb = user_kb.get_chat_gpt_keyboard(new_lang, from_msg)  # –ú–µ–Ω—é ChatGPT
    else:
        kb = user_kb.get_account(new_lang, from_msg)  # –ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    await call.message.edit_reply_markup(reply_markup=kb)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


'''
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(text="top_up_balance")
async def choose_amount(call: CallbackQuery):

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=user_kb.get_pay(call.from_user.id))  # –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="back_to_choose_balance", state="*")
async def back_to_choose_balance(call: CallbackQuery):

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=user_kb.get_pay(call.from_user.id))  # –ú–µ–Ω—é –æ–ø–ª–∞—Ç—ã


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –¥—Ä—É–≥–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="other_amount")
async def enter_other_amount(call: CallbackQuery):

    await call.message.edit_text("""–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä—É–±–ª—è—Ö:

<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ 200 —Ä—É–±–ª–µ–π</b>""", reply_markup=user_kb.back_to_choose)  # –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    await states.EnterAmount.enter_amount.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
'''

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è ChatGPT
@dp.message_handler(state="*", text="üí¨ChatGPT‚úÖ")
@dp.message_handler(state="*", text="üí¨ChatGPT")
@dp.message_handler(state="*", commands="chatgpt")
async def ask_question(message: Message, state: FSMContext):

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.change_default_ai(message.from_user.id, "chatgpt")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ChatGPT –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π AI
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if user["tokens"] <= 0 and user["free_chatgpt"] <= 0:
        return await not_enough_balance(message.bot, message.from_user.id, "chatgpt")  # –°–æ–æ–±—â–∞–µ–º –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    await message.answer("""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É: –ö–∞–∫ —è –ø—Ä–æ–≤—ë–ª —ç—Ç–æ –ª–µ—Ç–æ</code>

<u><a href="https://telegra.ph/Kak-polzovatsya-ChatGPT-podrobnaya-instrukciya-06-04">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
                         reply_markup=user_kb.get_chat_gpt_keyboard(user["chat_gpt_lang"], "chatgpt_menu"),
                         disable_web_page_preview=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
@dp.message_handler(state="*", text="üë®üèª‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
@dp.message_handler(state="*", commands="help")
async def support(message: Message, state: FSMContext):
    
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–û—Ç–≤–µ—Ç—ã –Ω–∞ –º–Ω–æ–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º <a href="https://t.me/NeuronAgent">–∫–∞–Ω–∞–ª–µ</a>.',
                         disable_web_page_preview=True, reply_markup=user_kb.about)  # –ö–Ω–æ–ø–∫–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è MidJourney
@dp.message_handler(state="*", text="üé®Midjourney‚úÖ")
@dp.message_handler(state="*", text="üé®Midjourney")
@dp.message_handler(state="*", commands="midjourney")
async def gen_img(message: Message, state: FSMContext):

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.change_default_ai(message.from_user.id, "image")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MidJourney –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π AI
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(message.bot, message.from_user.id, "image")  # –°–æ–æ–±—â–∞–µ–º –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    await message.answer("""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>
<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i> <code>–ó–∞–º–µ—Ä–∑—à–µ–µ –±–∏—Ä—é–∑–æ–≤–æ–µ –æ–∑–µ—Ä–æ –≤–æ–∫—Ä—É–≥ –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω</code>

<u><a href="https://telegra.ph/Kak-polzovatsya-MidJourney-podrobnaya-instrukciya-10-16">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
                         reply_markup=user_kb.get_menu("image"),
                         disable_web_page_preview=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(Text(startswith="select_amount"))
async def select_amount(call: CallbackQuery):

    amount = int(call.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    urls = {
        "tinkoff": pay.get_pay_url_tinkoff(call.from_user.id, amount),
        "freekassa": pay.get_pay_url_freekassa(call.from_user.id, amount),
        "payok": pay.get_pay_url_payok(call.from_user.id, amount),
    }
    await call.message.answer(f"""üí∞ –°—É–º–º–∞: <b>{amount} —Ä—É–±–ª–µ–π

‚ôªÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>""", reply_markup=user_kb.get_pay_urls(urls))  # –ö–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await call.answer()


'''
# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(state=states.EnterAmount.enter_amount)
async def create_other_order(message: Message, state: FSMContext):

    try:
        amount = int(message.text)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        return
    if amount < 10:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ 200 —Ä—É–±–ª–µ–π")
    else:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        urls = {
            "tinkoff": pay.get_pay_url_tinkoff(message.from_user.id, amount),
            "freekassa": pay.get_pay_url_freekassa(message.from_user.id, amount),
            "payok": pay.get_pay_url_payok(message.from_user.id, amount),
        }
        await message.answer(f"""üí∞ –°—É–º–º–∞: <b>{amount} —Ä—É–±–ª–µ–π

‚ôªÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>""", reply_markup=user_kb.get_pay_urls(urls))  # –ö–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
'''


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state="*", text="–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–í–≤–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=user_kb.get_menu(user["default_ai"]))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="choose_image:"))
async def choose_image(call: CallbackQuery):

    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    user = await db.get_user(call.from_user.id)
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(call.bot, call.from_user.id, "image")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è MidJourney
        return
    task_id = call.data.split(":")[1]
    image_id = call.data.split(":")[2]
    await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–ª–∏—á–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ‚Ä¶‚è≥", 
                              reply_markup=user_kb.get_menu(user["default_ai"]))
    res = await ai.get_choose_mdjrny(task_id, image_id, call.from_user.id)  # –ó–∞–ø—Ä–æ—Å –∫ MidJourney API
    if not res["success"]:
        if res["message"] == "repeat task":
            return await call.message.answer("–í—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")  # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="change_image:"))
async def change_image(call: CallbackQuery):

    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    user_id = call.from_user.id
    user_notified = await db.get_user_notified_mj(user_id)

    user = await db.get_user(user_id)
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(call.bot, user_id, "image")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        return
    task_id = call.data.split(":")[3]
    button_type = call.data.split(":")[1]
    value = call.data.split(":")[2]
    await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚è≥", 
                              reply_markup=user_kb.get_menu(user["default_ai"]))

    action_id = await db.add_action(user_id, "image", button_type)

    if 1 < user["mj"] <= 3:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        now = datetime.now()

        if user_notified is None:
            await db.create_user_notification_mj(user_id)
            await notify_low_midjourney_requests(user_id, call.bot)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
            # await db.set_user_notified(user_id)  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        else:
            last_notification = user_notified['last_notification']
            if last_notification is None or now > last_notification + timedelta(days=30):
                await db.update_user_notification_mj(user_id)
                await notify_low_midjourney_requests(user_id, call.bot)

    if button_type == "zoom":
        response = await mj_api.outpaint(task_id, value, action_id)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    elif button_type == "vary":
        value += "_variation"
        response = await mj_api.variation(task_id, value, action_id)  # –í–∞—Ä–∏–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(text="clear_content")
async def clear_content(call: CallbackQuery, state: FSMContext):

    user = await db.get_user(call.from_user.id)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await call.message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω", reply_markup=user_kb.get_menu(user["default_ai"]))  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    try:
        await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    except:
        pass


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="try_prompt"))
async def try_prompt(call: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    if "prompt" not in data:
        await call.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å")
        return await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await call.answer()

    user = await db.get_user(call.from_user.id)
    if user["default_ai"] == "image":
        await get_mj(data['prompt'], call.from_user.id, call.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT: –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(text="chatgpt_about_me", state="*")
async def chatgpt_about_me(call: CallbackQuery, state: FSMContext):

    user = await db.get_user(call.from_user.id)
    await call.message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å ChatGPT –ª—é–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã‚§µÔ∏è\n\n<u><a href="https://telegra.ph/Tonkaya-nastrojka-ChatGPT-06-30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>',
        disable_web_page_preview=True,
        reply_markup=user_kb.get_menu(user["default_ai"]))
    await state.set_state(states.ChangeChatGPTAboutMe.text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ ChatGPT
@dp.message_handler(state=states.ChangeChatGPTAboutMe.text)
async def change_profile_info(message: Message, state: FSMContext):

    if len(message.text) > 256:
        return await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 256 —Å–∏–º–≤–æ–ª–æ–≤")
    await db.update_chatgpt_about_me(message.from_user.id, message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.callback_query_handler(text="reset_chatgpt_settings", state="*")
async def reset_chatgpt_settings(call: CallbackQuery, state: FSMContext):

    await db.update_chatgpt_settings(call.from_user.id, "")
    await db.update_chatgpt_about_me(call.from_user.id, "")  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    await call.answer("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", show_alert=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.callback_query_handler(text="chatgpt_settings", state="*")
async def chatgpt_setting(call: CallbackQuery, state: FSMContext):

    user = await db.get_user(call.from_user.id)
    await call.message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ ChatGPT –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ - —Ç–æ–Ω, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–π ‚§µÔ∏è\n\n<u><a href="https://telegra.ph/Tonkaya-nastrojka-ChatGPT-06-30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>',
        disable_web_page_preview=True,
        reply_markup=user_kb.get_menu(user["default_ai"]))
    await state.set_state(states.ChangeChatGPTSettings.text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.message_handler(state=states.ChangeChatGPTSettings.text)
async def change_profile_settings(message: Message, state: FSMContext):

    if len(message.text) > 256:
        return await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 256 —Å–∏–º–≤–æ–ª–æ–≤")
    await db.update_chatgpt_settings(message.from_user.id, message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()


# –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message_handler()
async def gen_prompt(message: Message, state: FSMContext):

    await state.update_data(prompt=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(message.from_user.id)
    if user is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞")
        return await message.bot.send_message(796644977, message.from_user.id)

    if user["default_ai"] == "chatgpt":
        if user["tokens"] <= 0 and user["free_chatgpt"] <= 0:
            return await not_enough_balance(message.bot, message.from_user.id, "chatgpt")

        data = await state.get_data()
        system_msg = user["chatgpt_about_me"] + "\n" + user["chatgpt_settings"]
        messages = [{"role": "system", "content": system_msg}] if "messages" not in data else data["messages"]
        update_messages = await get_gpt(prompt=message.text, messages=messages, user_id=message.from_user.id,
                                        bot=message.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
        await state.update_data(messages=update_messages)

    elif user["default_ai"] == "image":
        await get_mj(message.text, message.from_user.id, message.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@dp.message_handler(is_media_group=False, content_types="photo")
async def photo_imagine(message: Message, state: FSMContext):

    if message.caption is None:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return
    file = await message.photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url = await more_api.upload_photo_to_host(photo_url)  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥
    if ds_photo_url == "error":
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
        await message.bot.send_message(bug_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å API-–∫–ª—é—á —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥–∞")
        return
    prompt = ds_photo_url + " " + message.caption  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    await state.update_data(prompt=prompt)
    await get_mj(prompt, message.from_user.id, message.bot)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤ (–≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ñ–æ—Ç–æ)
@dp.message_handler(is_media_group=True, content_types=ContentType.ANY)
async def handle_albums(message: Message, album: List[Message], state: FSMContext):
    
    if len(album) != 2 or not (album[0].photo and album[1].photo):
        return await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–≤–∞ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –∏—Ö —Å–∫–ª–µ–∏—Ç—å")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
    file = await album[0].photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url1 = await more_api.upload_photo_to_host(photo_url)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ
    file = await album[1].photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url2 = await more_api.upload_photo_to_host(photo_url)

    prompt = f"{ds_photo_url1} {ds_photo_url2}"  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–≤—É—Ö —Ñ–æ—Ç–æ
    await state.update_data(prompt=prompt)
    await get_mj(prompt, message.from_user.id, message.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney



