import string
import random
import logging
from datetime import datetime, timedelta

from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher import FSMContext

import config
import keyboards.admin as admin_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
from config import bot_url, ADMINS
from utils.ai import mj_api
from create_bot import dp  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from tabulate import tabulate  # –ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—ã
import states.admin as states  # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
from utils import db  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import asyncio


logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def format_statistics(stats):
    result = ""
    for order_type, details in stats.items():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
        unit = "–∑–∞–ø—Ä–æ—Å–æ–≤" if order_type == "midjourney" else "—Ç–æ–∫–µ–Ω–æ–≤"
        
        quantity_map = {
            "100000": "100–∫",
            "200000": "200–∫",
            "500000": "500–∫"
            }

        if quantity in quantity_map:
            quantity = quantity_map[quantity]
            
        result += f"{order_type.capitalize()}:\n" 

        for quantity, data in details.items():
            result += f"{quantity} {unit}: {data['count']}, –Ω–∞ —Å—É–º–º—É {data['total_amount']}‚ÇΩ.\n"
        result += "\n"
    return result



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
@dp.message_handler(lambda message: message.from_user.id in ADMINS,
                    text=["#switch_to_goapi", "#switch_to_apiframe"]
                    )
async def switch_api_handler(message: Message):

    if message.text == "#switch_to_goapi":
        try:
            mj_api.set_primary_api("goapi")
            await message.reply("–û—Å–Ω–æ–≤–Ω–æ–π API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ **GoAPI**.")
            logging.info(f"API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ GoAPI –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except ValueError as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ GoAPI: {e}")
    elif message.text == "#switch_to_apiframe":
        try:
            mj_api.set_primary_api("apiframe")
            await message.reply("–û—Å–Ω–æ–≤–Ω–æ–π API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ **ApiFrame**.")
            logging.info(f"API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ApiFrame –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except ValueError as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ ApiFrame: {e}")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∑–∞–ø—Ä–æ—Å–∞–º
@dp.message_handler(lambda message: message.from_user.id in ADMINS,
                    commands="stats"
                    )
async def show_stats(message: Message):
    
    stats_data = await db.get_stat()  # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

    stats_24h = await db.get_orders_statistics(period="24h")
    # stats_month = await db.get_orders_statistics(period="month")
    stats_all = await db.get_orders_statistics(period="all")

    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫—É–ø–æ–∫:\n\n"

    response += "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n\n"
    response += format_statistics(stats_24h) + "\n"

    # response += "–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n\n"
    # response += format_statistics(stats_month) + "\n"

    response += "–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:\n"
    response += format_statistics(stats_all) + "\n"

    await message.answer(f"""–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_data['users_count']}
–ó–∞–ø—Ä–æ—Å–æ–≤ {stats_data['chatgpt_count'] + stats_data['image_count']}
ChatGPT - {stats_data['chatgpt_count']}
Midjourney - {stats_data['image_count']}
 
–ó–∞ 24 —á–∞—Å–∞:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - {stats_data['today_users_count']}
–ó–∞–ø—Ä–æ—Å–æ–≤ - {stats_data['today_chatgpt_count'] + stats_data['today_image_count']}
ChatGPT - {stats_data['today_chatgpt_count']}
Midjourney - {stats_data['today_image_count']}

{response}
""", reply_markup=admin_kb.admin_menu)  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query_handler(is_admin=True, text='admin_ref_menu')
async def admin_ref_menu(call: CallbackQuery):

    inviters_id = await db.get_all_inviters()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    inviters = []
    for inviter_id in inviters_id:
        inviter = await db.get_ref_stat(inviter_id['inviter_id'])  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
        if inviter['all_income'] is None:
            all_income = 0
        else:
            all_income = inviter['all_income']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—É
        inviters.append(
            {'user_id': inviter_id['inviter_id'], 'refs_count': inviter['count_refs'],
             'orders_count': inviter['orders_count'],
             'all_income': all_income, 'available_for_withdrawal': inviter['available_for_withdrawal']})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º
    sort_inviters = sorted(inviters, key=lambda d: d['all_income'], reverse=True)
    await call.message.answer(
        f'<b>–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n<pre>{tabulate(sort_inviters, tablefmt="jira", numalign="left")}</pre>')  # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands="sub", is_admin=True)
async def add_balance(message: Message):

    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
        user_id, sub_type = message.get_args().split(" ")
        if sub_type not in config.sub_types.keys():
            raise ValueError
        user_id = int(user_id)
    except ValueError:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sub {id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è} {—Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏}")
        return

    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    if not user:
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
    if user["sub_time"] < datetime.now():
        base_sub_time = datetime.now()
    else:
        base_sub_time = user["sub_time"]
    sub_time = base_sub_time + timedelta(days=30)  # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    tokens = config.sub_types[sub_type]["tokens"]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    mj = config.sub_types[sub_type]["mj"]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è MidJourney
    await db.update_sub_info(user_id, sub_time, sub_type, tokens, mj)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞')  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands="balance", is_admin=True)
async def add_balance(message: Message):

    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        user_id, value = message.get_args().split(" ")
        value = int(value)
        user_id = int(user_id)
    except ValueError:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance {id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è} {–±–∞–ª–∞–Ω—Å}")
        return
    await db.add_balance_from_admin(user_id, value)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ
    await message.answer('–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω')  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(commands="send", is_admin=True)
async def enter_text(message: Message):

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=admin_kb.cancel)  # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await states.Mailing.enter_text.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.message_handler(state=states.Mailing.enter_text, is_admin=True)
async def start_send(message: Message, state: FSMContext):

    await message.answer("–ù–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    users = await db.get_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    count = 0
    block_count = 0
    for user in users:
        try:
            await message.bot.send_message(user["user_id"], message.text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            count += 1
        except:
            block_count += 1  # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞
        await asyncio.sleep(0.1)  # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    await message.answer(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ: {count}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞: {block_count}")  # –ò—Ç–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands="freemoney", is_admin=True)
async def create_promocode(message: Message):

    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: —Å—É–º–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
        amount, uses_count = message.get_args().split(" ")
        amount = int(amount)
        uses_count = int(uses_count)
    except ValueError:
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /freemoney {—Å—É–º–º–∞} {–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    code = ''.join(random.sample(string.ascii_uppercase, 10))
    await db.create_promocode(amount, uses_count, code)  # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
    promocode_url = f"{bot_url}?start=p{code}"  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω, —Å—Å—ã–ª–∫–∞: {promocode_url}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∞–¥–º–∏–Ω—É


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(is_admin=True, text='admin_promo_menu')
async def admin_promo_menu(call: CallbackQuery):
    
    promocodes = await db.get_promo_for_stat()  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    await call.message.answer(
        f'<b>–ë–æ–Ω—É—Å —Å—Å—ã–ª–∫–∏</b>\n\n<pre>{tabulate(promocodes, tablefmt="jira", numalign="left")}</pre>')
    await call.answer()
