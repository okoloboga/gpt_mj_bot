from datetime import datetime, timedelta

from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery

import config
import keyboards.user as user_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, –æ–ø–ª–∞—Ç–∞)
import utils
from create_bot import dp  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from utils import db, pay  # –ú–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏

vary_types = {"subtle": "Subtle", "strong": "Strong"}  # –¢–∏–ø—ã –≤–∞—Ä–∏–∞—Ü–∏–π –¥–ª—è MidJourney


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
def get_pay_urls(order_id, amount):
    return {
        "tinkoff": pay.get_pay_url_tinkoff(order_id, amount),  # –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Tinkoff
        "freekassa": pay.get_pay_url_freekassa(order_id, amount),  # –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ FreeKassa
        "payok": pay.get_pay_url_payok(order_id, amount),  # –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayOK
    }


'''–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ - GPT –∏–ª–∏ MJ'''

# –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É ChatGPT –∏ MidJourney
@dp.callback_query_handler(text="buy_sub")
async def choose_neural_network(call: CallbackQuery):

    await call.message.edit_text("""
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å‚§µÔ∏è""", 
    reply_markup=user_kb.get_neural_network_menu())


# –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ ChatGPT
@dp.callback_query_handler(text="buy_chatgpt_tokens")
async def choose_chatgpt_tokens(call: CallbackQuery):

    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await db.get_user_notified_gpt(user_id)
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    if user_data and user_data['last_notification']:
        last_notification = user_data['last_notification']
        
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å–∫–∏–¥–∫–æ–π
        if now < last_notification + timedelta(hours=24):
            await call.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π‚§µÔ∏è",
                reply_markup=user_kb.get_chatgpt_discount_tokens_menu()
            )
            return
    
    # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤‚§µÔ∏è",
        reply_markup=user_kb.get_chatgpt_tokens_menu()
    )


# –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ MidJourney
@dp.callback_query_handler(text="buy_midjourney_requests")
async def choose_midjourney_requests(call: CallbackQuery):
    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await db.get_user_notified_mj(user_id)
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    if user_data and user_data['last_notification']:
        last_notification = user_data['last_notification']
        
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å–∫–∏–¥–∫–æ–π
        if now < last_notification + timedelta(hours=24):
            await call.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π‚§µÔ∏è",
                reply_markup=user_kb.get_midjourney_discount_requests_menu()
            )
            return
    
    await call.message.edit_text("""
–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤‚§µÔ∏è""",
    reply_markup=user_kb.get_midjourney_requests_menu())


# –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–µ–Ω–æ–≤ –¥–ª—è GPT
@dp.callback_query_handler(Text(startswith="select_chatgpt_tokens:"))
async def handle_chatgpt_tokens_purchase(call: CallbackQuery):

    user_id = call.from_user.id

    tokens = int(call.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    amount = int(call.data.split(":")[2])  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    discounts = [139, 224, 381]
    user_discount = await db.get_user_notified_gpt(user_id)

    if user_discount is None or (user_discount['used'] != True or (user_discount['used'] == True and amount not in discounts)):
        
        if amount in discounts:  # –ü–æ–∫—É–ø–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
            await db.update_used_discount_gpt(user_id)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = await db.add_order(call.from_user.id, amount, "chatgpt", tokens)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        urls = get_pay_urls('s'+str(order_id), amount)
    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {tokens} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è üí¨ChatGPT, —Å—Ç–æ–∏–º–æ—Å—Ç—å {amount}‚ÇΩ.",
                                     reply_markup=user_kb.get_pay_urls(urls, order_id))
    
    else:
        await call.message.edit_text("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–∫–∏–¥–∫—É")

# –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Midjourney
@dp.callback_query_handler(Text(startswith="select_midjourney_requests:"))
async def handle_midjourney_requests_purchase(call: CallbackQuery):

    user_id = call.from_user.id
    requests_count = int(call.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    amount = int(call.data.split(":")[2])  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    discounts = [246, 550, 989]
    user_discount = await db.get_user_notified_mj(user_id)

    if user_discount is None or (user_discount['used'] != True or (user_discount['used'] == True and amount not in discounts)):
        
        if amount in discounts:  # –ü–æ–∫—É–ø–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
            await db.update_used_discount_mj(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = await db.add_order(call.from_user.id, amount, "midjourney", requests_count)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        urls = get_pay_urls('s'+str(order_id), amount)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        await call.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {requests_count} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è üé®MidJourney, —Å—Ç–æ–∏–º–æ—Å—Ç—å {amount}‚ÇΩ.",
                                     reply_markup=user_kb.get_pay_urls(urls, order_id))
    else:
        await call.message.edit_text("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–∫–∏–¥–∫—É")

''' –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ 

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(text="buy_sub")
async def choose_amount(call: CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    await call.message.edit_text("""
–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ‚§µÔ∏è

–¢–∞—Ä–∏—Ñ <b>¬´–ë–∞–∑–æ–≤—ã–π¬ª</b>
1 –º–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
10 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Midjourney –≤ –¥–µ–Ω—å

–¢–∞—Ä–∏—Ñ <b>¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª</b>
2 –º–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Midjourney –≤ –¥–µ–Ω—å

–¢–∞—Ä–∏—Ñ <b>¬´–ü—Ä–µ–º–∏—É–º¬ª</b>
5 –º–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
40 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Midjourney –≤ –¥–µ–Ω—å

–¢–∞—Ä–∏—Ñ <b>¬´–ò–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä¬ª</b>
50 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Midjourney –≤ –¥–µ–Ω—å

–¢–∞—Ä–∏—Ñ <b>¬´–ê–≤—Ç–æ—Ä¬ª</b>
10 –º–ª–Ω —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Midjourney –≤ –¥–µ–Ω—å""", reply_markup=user_kb.sub_types)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="sub_type:"))
async def choose_amount(call: CallbackQuery):
    sub_type = call.data.split(":")[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
    discount = False  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Å–∫–∏–¥–∫–∞
    try:
        call.data.split(":")[2]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ—Ç–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ (–µ—Å–ª–∏ –µ—Å—Ç—å, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Å–∫–∏–¥–∫–∞)
        discount = True
    except IndexError:
        pass

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–∫–∏–¥–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã
    if discount:
        prices = config.sub_types[sub_type]["discount_prices"]
    else:
        prices = config.sub_types[sub_type]["prices"]

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏‚§µÔ∏è",
                                 reply_markup=user_kb.get_sub_period(sub_type, prices, discount))


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(Text(startswith="sub_period:"))
async def choose_amount(call: CallbackQuery):
    sub_type = call.data.split(":")[1]  # –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    sub_period_id = int(call.data.split(":")[2])  # –ü–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
    discount = False
    try:
        call.data.split(":")[3]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫–∏–¥–∫–∏
        discount = True
    except IndexError:
        pass

    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∫–∏–¥–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
    if discount:
        order = await db.check_discount_order(call.from_user.id)
        if order:
            await call.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–∫–∏–¥–∫—É", show_alert=True)
            return await call.message.delete()

        # –ï—Å–ª–∏ —Å–∫–∏–¥–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ —Å–æ —Å–∫–∏–¥–∫–æ–π
        price_data = config.sub_types[sub_type]["discount_prices"][sub_period_id]
    else:
        # –ï—Å–ª–∏ —Å–∫–∏–¥–∫–∏ –Ω–µ—Ç, –±–µ—Ä–µ–º –æ–±—ã—á–Ω—ã–µ —Ü–µ–Ω—ã
        price_data = config.sub_types[sub_type]["prices"][sub_period_id]

    amount = price_data["price"]  # –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    order_id = await db.add_sub_order(call.from_user.id, amount, sub_type, discount, price_data["days"])
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    urls = get_pay_urls("s" + str(order_id), amount)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    await call.message.answer(f"""üí∞ –°—É–º–º–∞: {amount} —Ä—É–±–ª–µ–π

‚ôªÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏""", reply_markup=user_kb.get_pay_urls(urls, order_id))
    await call.answer()
'''

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram (–ø—Ä–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
@dp.callback_query_handler(Text(startswith="tg_stars:"))
async def back_to_buy_vpn(call: CallbackQuery):

    order_id = int(call.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
    order = await db.get_order(order_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram
    await call.bot.send_invoice(call.from_user.id,
                                title="–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                                description=f"""üí∞ –°—É–º–º–∞: {order['amount']} —Ä—É–±–ª–µ–π

‚ôªÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏""",
                                provider_token="",  # –¢–æ–∫–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
                                payload=f"{order_id}",  # ID –∑–∞–∫–∞–∑–∞
                                currency="XTR",  # –í–∞–ª—é—Ç–∞ –æ–ø–ª–∞—Ç—ã
                                prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=order["amount"] // 2)],  # –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                                reply_markup=user_kb.get_tg_stars_pay()  # –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
                                )
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram
@dp.pre_checkout_query_handler()
async def approve_order(pre_checkout_query: PreCheckoutQuery):

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑ (–æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞)
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@dp.message_handler(content_types="successful_payment")
async def process_successful_payment(message: Message):
    
    order_id = int(message.successful_payment.invoice_payload)  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ payload
    await utils.pay.process_purchase(message.bot, order_id)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ)
